#' remove all
rm(list = ls())
#' clean Corinne Kendall Tanzania data
library(tidyverse)
#' Load the required packages
library(readr)
library(tidyverse)
library(amt)
library(SDLfilter)
library(ggmap)
library(sf)
library(raster)
library(adehabitatHR)
library(adehabitatLT)
####' load the data ----
data_path <- "data_eswatini"   # path to the data
length(files)
files <- dir(data_path, pattern = "*.csv") # get file names
#' clean Corinne Kendall Mara data
library(tidyverse)
library(readxl)
#' remove all
rm(list = ls())
#' load
mydata <- read_excel("data_kendall_mara/raw_data_drive/Vultures Kendall Masai Mara Kenya.xlsx", col_names = T)
head(mydata)
#' Mendhelsohn - identification of breeding sites
#' remove all
rm(list = ls())
graphics.off()
#' Load the required packages
library(readr)
library(tidyverse)
library(amt)
library(SDLfilter)
library(ggmap)
library(sf)
library(raster)
library(adehabitatHR)
library(adehabitatLT)
####' load the data ----
data_path <- "data_mend"   # path to the data
files <- dir(data_path, pattern = "*.csv") # get file names
length(files)
mydata <- files %>%
# read in all the files, appending the path before the filename
map(~ read_csv(file.path(data_path, .))) %>%
reduce(rbind)
mydata$long <- as.numeric(mydata$long)
mydata$lat <- as.numeric(mydata$lat)
#' Tracks are in UTC
head(mydata)
mydata$time <-
as.POSIXct(mydata$time, format = "%d/%m/%Y %H:%M", tz = "UTC")
head(mydata)
#' remove underscores from bird IDs
mydata$id <- gsub("_", "", mydata$id)
levels(as.factor(mydata$id))
####' clean the data ----
#' Check for duplicated observations (ones with same lat, long, timestamp,
#'  and individual identifier).
ind2 <- mydata %>% dplyr::select(time, long, lat, id) %>%
duplicated
sum(ind2)
#' remove them
mydata$dups <- ind2
mydata <- filter(mydata, dups == "FALSE")
mydata
#' filter extreme data based on a speed threshold
#' based on vmax which is km/hr
#' time needs to be labelled DateTime for these functions to work
names(mydata)[names(mydata) == 'time'] <- 'DateTime'
SDLfilterData <-
ddfilter.speed(data.frame(mydata), vmax = 100, method = 1)
length(SDLfilterData$DateTime)
head(SDLfilterData)
#' rename everything as before
mydata <- SDLfilterData
names(mydata)[names(mydata) == 'DateTime'] <- 'time'
#' select only the columns we need
mydata <- dplyr::select(mydata, time, lat, long, id, species, study)
head(mydata)
####' use amt package functions ----
#' convert into a track using amt
#' We can also use lat, long, which will allow us to determine
#' time of day
trk <- mk_track(
mydata,
.x = long,
.y = lat,
.t = time,
id = id,
crs = CRS("+init=epsg:4326")
)
trk
trk <- trk %>% arrange(id, t_)
#' Now it is easy to calculate day/night with either movement track
trk <- trk %>% time_of_day()
#' can remove the night time points as follows:
day_trk <- filter(trk, tod_ == "day") %>% arrange(id, t_)
####' create monthly groups ----
#' we need to extract monthly home ranges, some animals were tracked for over a year
#' so we must include a year-month-id grouping variable
#' first combine year and month
day_trk$yr_month <- format(day_trk$t_, format = "%Y/%m")
day_trk$yr_month <- as.factor(day_trk$yr_month)
#' we also need a year-month-day variable to see what the coverage is like over the course of
#' a month for each individual
day_trk$yr_month_day <- format(day_trk$t_, format = "%Y/%m/%d")
day_trk$yr_month_day <- as.factor(day_trk$yr_month_day)
head(day_trk)
#' count the number of unique days when grouped by id and and month
short_months <- day_trk %>%
group_by(id, yr_month) %>%
summarise(count = n_distinct(yr_month_day)) %>% filter(count < 28) %>% droplevels()
short_months
short_months$yr_month
#' we merge the two data frames and force all = TRUE so even the values that don't have a count
#' are included, this allows us to extract the tracks that have ~ a month
#' of coverage
test <- merge(short_months, day_trk, all = TRUE)
length(test$id)
length(day_trk$id)
summary(test$count)
#' keep only the rows with the NAs which are the counts > 28 i.e. data with ~ a month
#' of coverage
day_trk_mod <- test %>% dplyr::filter(is.na(count))
head(day_trk_mod)
summary(day_trk_mod$count)
#' now create a unique identifier that has the ID, year and month
#' We will use these to build home ranges
day_trk_mod$identifier <-
paste(day_trk_mod$id, day_trk_mod$yr_month, sep = "_")
day_trk_mod$identifier <- as.factor(day_trk_mod$identifier)
head(day_trk_mod)
#' add the month and extract months where the bird could be breeding
day_trk_mod$month <- format(day_trk_mod$t_, format = "%m")
head(day_trk_mod)
day_trk_mod$month <- as.numeric(day_trk_mod$month)
head(day_trk_mod)
day_trk_mod <- day_trk_mod %>% filter(month >= 3 & month <= 9)
#' turn this back into a track object
day_trk <- mk_track(
day_trk_mod,
.x = x_,
.y = y_,
.t = t_,
id = identifier,
crs = CRS("+init=epsg:4326")
)
day_trk
##### albers equal area projection ----
#' save the track object by nesting according to id and
#' converting coords into albers equal area so units are in metres
trk1 <- day_trk %>%
transform_coords(
sp::CRS(
#' we can transform the CRS of the data to an equal area projection
#' https://epsg.io/102022
"+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
)
)
trk1
#-------------------------------------
# Caluculate revisits in 50m radius
#-------------------------------------
# 50 m radius to find nesting/roosting sites (be careful of GPS error, approx. +/- 18m)
point_list <-
split(trk1, trk1$id)
point_list <- discard(point_list, function(x)
nrow(x) == 0)
recursions <- lapply(point_list, function(x)
getRecursions(data.frame(x), 50, timeunits = "days"))
summary(recursions)
n <- c()
for (i in 1:length(recursions)) {
n[i] <- max(recursions[[i]]$residenceTime)
}
n
sum(n > 15)
#' combine the IDs with the max time data from the recursion analysis
recursion_time <- cbind(data.frame(names(point_list), n))
recursion_time
#' #' time long lat id species
recursion_time <- recursion_time %>% rename(id = names.point_list.)
recursion_time <- recursion_time %>% rename(time = n)
#' pull out the ID which occurs before the first _
recursion_time$bird <- gsub("(.+?)(\\_.*)", "\\1", recursion_time$id)
recursion_time$breeding <- if_else(recursion_time$time > 10, "yes", "no")
recursion_time
recursion_time$study <- "mend"
library(tidyverse)
####' load the data ----
data_path <- "summary"   # path to the data
files <- dir(data_path, pattern = "*recursion") # get file names
length(files)
#' Summarise breeding data
#' remove all
rm(list = ls())
graphics.off()
#' Load the required packages
library(tidyverse)
####' load the data ----
####'
data_path <- "C:\\Users\\Adam\\Documents\\Science\\Manuscripts\\Vulture protected areas\\summary"
#' data_path <- "summary"   # path to the data
files <- dir(data_path, pattern = "*recursion") # get file names
length(files)
mydata <- files %>%
# read in all the files, appending the path before the filename
map( ~ read_csv(file.path(data_path, .))) %>%
reduce(rbind)
head(mydata)
#' load in the yearly summary data file to add on extra info.
yearly <- read_csv("C:\\Users\\Adam\\Documents\\Science\\Manuscripts\\Vulture protected areas\\summary\\modified summaries\\yearly_data_summary.csv", col_names = T)
head(yearly)
#' Some of Buechley's data is actually located in Southern Africa
#' and needs to have region changed to south:
south_buechley <- c(
"Fringilla",
"Lemba",
"Lizzy",
"Mubanga",
"Precision",
"Timbavati",
"WBVUSA01",
"WBVUSA02"
)
#' do it for yearly data
filter(yearly, study == "Buechley") %>%
group_by(id) %>%
slice(1) %>%
dplyr::select(id, study, region)
yearly$region <-
ifelse(yearly$id %in% south_buechley, "south", yearly$region)
filter(yearly, study == "Buechley") %>%
group_by(id) %>%
slice(1) %>%
dplyr::select(id, study, region)
####' add the age column to the monthly data using ids ----
#' this is called id in the yearly data and bird in the breeding data
mydata$age <- yearly$age[match(mydata$bird, yearly$id)]
head(mydata)
#' add the known breeders
mydata$recorded_breeder <- yearly$`confirmed_breeding?`[match(mydata$bird, yearly$id)]
mydata
#' add the region
mydata$region <- yearly$region[match(mydata$bird, yearly$id)]
mydata
#' add the species
mydata$species <- yearly$species[match(mydata$bird, yearly$id)]
mydata
#' look at adults only
adults <- mydata %>% dplyr::filter(age == "adult")
#' what is the maximum value at one site for known breeders?
filter(adults, recorded_breeder == "yes") %>%
group_by(bird) %>%
summarise(max_time = max(time))
#' look at bird with the smallest max value for breeding time in one area
filter(adults, bird == "X027")
#' create a column with month
adults$month <- basename(adults$id)
#' can plot the times at one area as a histogram
ggplot(adults, aes(x = time)) + geom_histogram( fill = "steelblue", colour = "navy", alpha = 0.9) +
geom_vline(data = adults, aes(xintercept = 4.65, colour = "red")) +
theme_minimal() + theme(legend.position = "none")
#' plot time spent in one location by region
ggplot(adults, aes(x = as.numeric(month), y = time)) + geom_point(fill = "steelblue", colour = "navy", alpha = 0.9) + theme_minimal() + theme(legend.position = "none") +
scale_x_continuous(breaks=c(1:12)) + facet_wrap(~region) + xlab("month")
#' same as above but with a boxplot
ggplot(adults, aes(x = month, y = time)) + geom_boxplot(fill = "steelblue", colour = "navy", alpha = 0.9, group = species) + theme_minimal() + theme(legend.position = "none") + facet_wrap(~region) + xlab("month")
adults
#' same as above but with a boxplot
ggplot(adults, aes(x = month, y = time, colour = species)) + geom_boxplot(fill = "steelblue", colour = "navy", alpha = 0.9) + theme_minimal() + theme(legend.position = "none") + facet_wrap(~region) + xlab("month")
#' same as above but with a boxplot
adults %>% filter(species == "wb") %>%
ggplot(., aes(x = month, y = time)) + geom_boxplot(fill = "steelblue", colour = "navy", alpha = 0.9) + theme_minimal() + theme(legend.position = "none") + facet_wrap(~region) + xlab("month")
#' same as above but with a boxplot
adults %>% filter(species == "rv") %>%
ggplot(., aes(x = month, y = time)) + geom_boxplot(fill = "steelblue", colour = "navy", alpha = 0.9) + theme_minimal() + theme(legend.position = "none") + facet_wrap(~region) + xlab("month")
#' same as above but with a boxplot
adults %>% filter(species == "cv") %>%
ggplot(., aes(x = month, y = time)) + geom_boxplot(fill = "steelblue", colour = "navy", alpha = 0.9) + theme_minimal() + theme(legend.position = "none") + facet_wrap(~region) + xlab("month")
#' same as above but with a boxplot
adults %>% filter(species == "wb") %>%
ggplot(., aes(x = month, y = time)) + geom_boxplot(fill = "steelblue", colour = "navy", alpha = 0.9) + theme_minimal() + theme(legend.position = "none") + facet_wrap(~region) + xlab("month")
#' same as above but with a boxplot
adults %>% filter(species == "wb") %>%
ggplot(., aes(x = month, y = time)) + geom_boxplot(fill = "steelblue", colour = "navy", alpha = 0.9) + theme_minimal() + theme(legend.position = "none") + facet_wrap(~region) + xlab("month") + ggtitle("white backed vultures")
#' same as above but with a boxplot
adults %>% filter(species == "cv") %>%
ggplot(., aes(x = month, y = time)) + geom_boxplot(fill = "steelblue", colour = "navy", alpha = 0.9) + theme_minimal() + theme(legend.position = "none") + facet_wrap(~region) + xlab("month") + ggtitle("cape vultures")
#' same as above but with a boxplot
adults %>% filter(species == "rv") %>%
ggplot(., aes(x = month, y = time)) + geom_boxplot(fill = "steelblue", colour = "navy", alpha = 0.9) + theme_minimal() + theme(legend.position = "none") + facet_wrap(~region) + xlab("month") + ggtitle("cape vultures")
#' same as above but with a boxplot
adults %>% filter(species == "rv") %>%
ggplot(., aes(x = month, y = time)) + geom_boxplot(fill = "steelblue", colour = "navy", alpha = 0.9) + theme_minimal() + theme(legend.position = "none") + facet_wrap(~region) + xlab("month") + ggtitle("ruppells vultures")
?brownian.bridge.dyn
library(move)
?brownian.bridge.dyn
?hr_isopleths
library(amt)
?hr_isopleths
version
